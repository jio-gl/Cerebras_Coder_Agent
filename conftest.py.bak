# conftest.py
import pytest
from click.testing import CliRunner
from pathlib import Path
import shutil
import tempfile
from unittest.mock import patch, MagicMock
import json

@pytest.fixture
def runner():
    """Fixture for CLI command testing with Click's CliRunner."""
    return CliRunner()

@pytest.fixture
def tmp_dir(tmp_path):
    """Fixture providing a temporary directory path with cleanup."""
    return tmp_path

@pytest.fixture
def temp_project_dir(tmp_path):
    """Fixture for creating and cleaning up a temporary project directory."""
    project_root = tmp_path / "test_project"
    project_root.mkdir()
    
    # Create standard test directory structure
    (project_root / "data").mkdir()
    (project_root / "models").mkdir()
    (project_root / "config").mkdir()
    
    # Create sample files
    (project_root / "README.md").write_text("# Test Project")
    (project_root / "config" / "settings.json").write_text("{}")
    
    yield project_root
    
    # Cleanup after test
    shutil.rmtree(str(project_root), ignore_errors=True)

@pytest.fixture
def mock_agent():
    """Create a mock agent instance"""
    agent = MagicMock()
    agent.name = "TestAgent"
    agent.version = "1.0.0"
    agent.process.return_value = {"status": "success"}
    return agent

@pytest.fixture
def sample_model_data():
    """Fixture providing sample model data for testing."""
    return {
        "name": "TestModel",
        "version": "1.0.0",
        "parameters": {
            "learning_rate": 0.001,
            "batch_size": 32,
            "epochs": 10
        },
        "metadata": {
            "author": "Test Author",
            "license": "MIT"
        }
    }

@pytest.fixture
def mock_environment():
    """Fixture for mocking a testing environment."""
    from unittest.mock import patch
    with patch("os.environ", {"TEST_MODE": "true"}):
        yield

@pytest.fixture
def tmp_data_dir(tmp_path):
    """Create a temporary data directory structure"""
    data_dir = tmp_path / "data"
    data_dir.mkdir()
    (data_dir / "input.json").write_text(json.dumps({"test": "value"}))
    (data_dir / "output.txt").write_text("test output")
    return data_dir

@pytest.fixture
def mock_config():
    """Provide a mock configuration dictionary"""
    return {
        "api_key": "test123",
        "max_retries": 3,
        "timeout": 30,
        "debug": False
    }

@pytest.fixture
def mock_env_vars():
    """Mock environment variables for tests"""
    with patch.dict('os.environ', {
        'API_KEY': 'test_api_key',
        'LOG_LEVEL': 'DEBUG'
    }):
        yield
